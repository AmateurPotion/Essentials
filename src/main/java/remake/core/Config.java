package remake.core;

import org.hjson.JsonArray;
import org.hjson.JsonObject;
import org.hjson.JsonValue;

import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.Locale;

import static essentials.Main.root;

public class Config {
    public final int version;
    public final Locale language;
    public final boolean serverenable;
    public final int serverport;
    public final boolean clientenable;
    public final int clientport;
    public final String clienthost;
    public final boolean realname;
    public final boolean strictname;
    public final int cupdatei;
    public final boolean detectreactor;
    public final boolean scanresource;
    public final boolean antigrief;
    public final boolean alertaction;
    public final boolean explimit;
    public final int basexp;
    public final Float exponent;
    public final boolean levelupalarm;
    public final int alarmlevel;
    public final boolean banshare;
    public final JsonArray bantrust;
    public final boolean query;
    public final boolean antivpn;
    public final boolean antirush;
    public final LocalTime antirushtime;
    public final boolean voteenable;
    public final boolean logging;
    public final boolean update;
    public final boolean internalDB;
    public final boolean DBServer;
    public final String DBurl;
    public final boolean OldDBMigration;
    public final String OldDBurl;
    public final String OldDBID;
    public final String OldDBPW;
    public final String dataserverurl;
    public final String dataserverid;
    public final String dataserverpw;
    public final boolean loginenable;
    public final String passwordmethod;
    public final boolean validconnect;
    public final String emailserver;
    public final int emailport;
    public final String emailAccountID;
    public final String emailUsername;
    public final String emailPassword;
    public final String discordtoken;
    public final String discordguild;
    public final String discordroom;
    public final String discordlink;
    public final String discordrole;
    public final String discordprefix;
    public final boolean translate;
    public final String translateid;
    public final String translatepw;
    public final boolean debug;
    public final String debugcode;
    public final boolean crashreport;
    public final LocalTime savetime;
    public final boolean rollback;
    public final int slotnumber;
    public final boolean autodifficulty;
    public final int difficultyEasy;
    public final int difficultyNormal;
    public final int difficultyHard;
    public final int difficultyInsane;
    public final boolean border;
    public final int spawnlimit;
    public final String prefix;
    public final String eventport;

    public Config(){
        JsonObject obj = JsonValue.readHjson(root.child("config.hjson").readString()).asObject();
        version = obj.get("version").asInt();
        language = new Locale(obj.get("language").asString());
        serverenable = obj.get("serverenable").asBoolean();
        serverport = obj.get("serverport").asInt();
        clientenable = obj.get("clientenable").asBoolean();
        clientport = obj.get("clientport").asInt();
        clienthost = obj.get("clienthost").asString();
        realname = obj.get("realname").asBoolean();
        strictname = obj.get("strictname").asBoolean();
        cupdatei = obj.get("cupdatei").asInt();
        detectreactor = obj.get("detectreactor").asBoolean();
        scanresource = obj.get("scanresource").asBoolean();
        antigrief = obj.get("antigrief").asBoolean();
        alertaction = obj.get("alertaction").asBoolean();
        explimit = obj.get("explimit").asBoolean();
        basexp = obj.get("basexp").asInt();
        exponent = obj.get("exponent").asFloat();
        levelupalarm = obj.get("levelupalarm").asBoolean();
        alarmlevel = obj.get("alarmlevel").asInt();
        banshare = obj.get("banshare").asBoolean();
        bantrust = obj.get("bantrust").asArray();
        query = obj.get("query").asBoolean();
        antivpn = obj.get("antivpn").asBoolean();
        antirush = obj.get("antirush").asBoolean();
        antirushtime = LocalTime.parse(obj.get("antirushtime").asString(), DateTimeFormatter.ofPattern("mm.ss"));
        voteenable = obj.get("voteenable").asBoolean();
        logging = obj.get("logging").asBoolean();
        update = obj.get("update").asBoolean();
        internalDB = obj.get("internalDB").asBoolean();
        DBServer = obj.get("DBServer").asBoolean();
        DBurl = obj.get("DBurl").asString();
        OldDBMigration = obj.get("OldDBMigration").asBoolean();
        OldDBurl = obj.get("OldDBurl").asString();
        OldDBID = obj.get("OldDBID").asString();
        OldDBPW = obj.get("OldDBPW").asString();
        dataserverurl = obj.get("dataserverurl").asString();
        dataserverid = obj.get("dataserverid").asString();
        dataserverpw = obj.get("dataserverpw").asString();
        loginenable = obj.get("loginenable").asBoolean();
        passwordmethod = obj.get("passwordmethod").asString();
        validconnect = obj.get("validconnect").asBoolean();
        emailserver = obj.get("emailserver").asString();
        emailport = obj.get("emailport").asInt();
        emailAccountID = obj.get("emailAccountID").asString();
        emailUsername = obj.get("emailUsername").asString();
        emailPassword = obj.get("emailPassword").asString();
        discordtoken = obj.get("discordtoken").asString();
        discordguild = obj.get("discordguild").asString();
        discordroom = obj.get("discordroom").asString();
        discordlink = obj.get("discordlink").asString();
        discordrole = obj.get("discordrole").asString();
        discordprefix = obj.get("discordprefix").asString();
        translate = obj.get("translate").asBoolean();
        translateid = obj.get("translateid").asString();
        translatepw = obj.get("translatepw").asString();
        debug = obj.get("debug").asBoolean();
        debugcode = obj.get("debugcode").asString();
        crashreport = obj.get("crashreport").asBoolean();
        savetime = LocalTime.parse(obj.get("savetime").asString(), DateTimeFormatter.ofPattern("mm.ss"));
        rollback = obj.get("rollback").asBoolean();
        slotnumber = obj.get("slotnumber").asInt();
        autodifficulty = obj.get("autodifficulty").asBoolean();
        difficultyEasy = obj.get("difficultyEasy").asInt();
        difficultyNormal = obj.get("difficultyNormal").asInt();
        difficultyHard = obj.get("difficultyHard").asInt();
        difficultyInsane = obj.get("difficultyInsane").asInt();
        border = obj.get("border").asBoolean();
        spawnlimit = obj.get("spawnlimit").asInt();
        prefix = obj.get("prefix").asString();
        eventport = obj.get("eventport").asString();
    }
}
